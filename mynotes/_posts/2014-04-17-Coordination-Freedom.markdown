---
layout: post
title:  "Coordination Freedom Analysis"
date:   2014-04-17 22:55:24
categories: Research Notes
---

	This article describes a simplified CoordFree analysis.

<div>
\[
\newcommand{\ALT}{~|~}
\newcommand{\spec}{\overline{\forall a}. \phi_1 \Rightarrow \phi_2}
\newcommand{\cf}[1]{CoordFree(#1)}
\newcommand{\llbracket}{[\![}
\newcommand{\rrbracket}{]\!]}
\begin{array}{rcl}
a,b,x  & \in  & Action \\
lspec  & :=   &  \spec \\
\phi   & :=   & True \ALT vis(a,b) \ALT so(a,b) \\
       & \ALT & inVis(a) \ALT inSo(a) \ALT \phi \odot \phi \\
\odot  & :=   & \wedge \ALT \vee \\
\end{array}
\]
</div>

The new constructs are $inVis(a)$ and $inSo(a)$ which are equivalent to
$vis(a,x)$ and $so(a,x)$ where $x$ is the action potentially generated by the
operation under focus. Also, we assume that $\wedge$ has higher precendence
than $\vee$, and both $\wedge$ and $\vee$ are associative and commutative.
Moreover, the standard logical equivalences hold $\llbracket P \odot True
\rrbracket = \llbracket P \rrbracket$.

Let $k(x)$ indicate that $x$ is known. We want to know whether a specification
of the form $\spec$ is coordination free (locally checked and enforced without
coordination). To answer this, we will utilize $\cf{spec}$ which holds for
specifications that are coordination free. Of course, we assume that the
specification does not introduce logical inconsistencies. For example, the
following are logically inconsistent specifications:

* $\forall a,b. so(a,b) \wedge so(b,a) \Rightarrow inVis(a)$ - session order is total.
* $\forall a,b. inSo(a) \wedge vis(b,a) \Rightarrow inVis(b)$ - happens-before is acyclic.

The logically inconsistent specifications are weeded out using the SMT solver
and the set of basic axioms. This **Coordination Freedom** analysis is defined
below:

<div>
\[
\newcommand{\cfxto}{~\overset{ext}{\longrightarrow}~}
\newcommand{\cfcto}{~\overset{chk}{\longrightarrow}~}
\newcommand{\rulesep}{\;\;\;\;\;\;}
\frac{\emptyset \vdash \phi_1 ~\overset{ext~*}{\longrightarrow}~ \Gamma \vdash True \rulesep
      \Gamma \vdash \phi_2 ~\overset{chk~*}{\longrightarrow}~ \Gamma \vdash True}
     {\cf{\spec}} \rulesep
\]
</div>

where

<div>
\[
\begin{array}{rcll}
\Gamma \vdash True \odot \phi & \cfcto & \Gamma \vdash \phi & (C.1)\\
\Gamma, k(a) \vdash inVis(a) \odot \phi & \cfcto & \Gamma, k(a) \vdash True \odot \phi & (C.2) \\ \\

\Gamma \vdash True \odot \phi & \cfxto & \Gamma \vdash \phi & (E.1) \\
\Gamma, k(b) \vdash vis(a,b) \odot \phi & \cfxto & \Gamma, k(a), k(b) \vdash True \odot \phi & (E.2) \\
\Gamma, k(b) \vdash so(a,b) \odot \phi & \cfxto & \Gamma, k(a), k(b) \vdash True \odot \phi & (E.3) \\
\Gamma \vdash inSo(a) \odot \phi & \cfxto & \Gamma, k(a) \vdash True \odot \phi & (E.4) \\
\Gamma \vdash inVis(a) \odot \phi & \cfxto & \Gamma, k(a) \vdash True \odot \phi & (E.5) \\
\end{array}
\]
</div>

## Examples

### Read my writes

<div>
\[
\newcommand{\doExt}{~\overset{ext~*}{\longrightarrow}~}
\newcommand{\doChk}{~\overset{chk~*}{\longrightarrow}~}
\begin{array}{rl}
\text{Spec :} 		& rmw = \forall a. inSo(a) \Rightarrow inVis(a) \\
\text{Extension :} 	& \emptyset \vdash inSo(a)
					  \doExt k(a) \vdash True \\
\text{Check :}		& k(a) \vdash inVis(a)
                      \doChk k(a) \vdash True \\
\end{array}
\]
</div>

Hence, $\cf{rmw}$ holds.

### Causal Visibility

<div>
\[
\begin{array}{rl}
\text{Spec :} 		& cau = \forall a,b. vis(a,b) \wedge inVis(b) \Rightarrow inVis(a) \\
\text{Extension :} 	& \emptyset \vdash inVis(b) \wedge vis(a,b)
                      \doExt k(b) \vdash vis(a,b)
					  \doExt k(a), k(b) \vdash True \\
\text{Check :}		& k(a),k(b) \vdash inVis(a)
                      \doChk k(a), k(b) \vdash True \\
\end{array}
\]
</div>

Hence, $\cf{cau}$ holds. Similarly, monotonic reads and writes are coordination free.

### Final action

Here is an example of a local specification that is not coordination free. This
specification states that the operation is the last operation globally.

<div>
\[
\begin{array}{rl}
\text{Spec :} & last = \forall a. True => inVis(a) \\
\text{Extension :} & \emptyset \vdash True \\
\text{Check :} & \emptyset \vdash inVis(a) \doChk \ldots \\
\end{array}
\]
</div>

The check gets stuck! This indicates that the final action specification is not
coordination free, and requires global knowledge (coordination).
